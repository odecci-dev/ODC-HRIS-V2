// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using API_HRIS.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace API_HRIS.Models
{
    public partial class ODC_HRISContext
    {
        private IODC_HRISContextProcedures _procedures;

        public virtual IODC_HRISContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new ODC_HRISContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IODC_HRISContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<GetAllUserDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetUserLogInResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_timelogsResult>().HasNoKey().ToView(null);
        }
    }

    public partial class ODC_HRISContextProcedures : IODC_HRISContextProcedures
    {
        private readonly ODC_HRISContext _context;

        public ODC_HRISContextProcedures(ODC_HRISContext context)
        {
            _context = context;
        }

        public virtual async Task<List<GetAllUserDetailsResult>> GetAllUserDetailsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllUserDetailsResult>("EXEC @returnValue = [dbo].[GetAllUserDetails]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetUserLogInResult>> GetUserLogInAsync(string Username, string Password, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Username",
                    Size = 255,
                    Value = Username ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Password",
                    Size = 255,
                    Value = Password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetUserLogInResult>("EXEC @returnValue = [dbo].[GetUserLogIn] @Username = @Username, @Password = @Password", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_timelogsResult>> sp_timelogsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_timelogsResult>("EXEC @returnValue = [dbo].[sp_timelogs]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
